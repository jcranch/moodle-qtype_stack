check_score_list(ans,scores,nam) := block([sc,an,fb,nn,nam1],
 sc : "", an : "", fb : "",
 nn : length(scores),
 if nam = "" then (
  nam1 : "the tournament"
 ) else (
  nam1 : sconcat("tournament ",nam)
 ),
 if an = "" and not(listp(ans)) then (
  an : "not a list",
  fb : "Your answer is not a list."
 ),
 if an = "" and not(every(nonnegintegerp,ans)) then (
  an : "not nonnegint",
  fb : "Your answer is not a list of nonnegative integers"
 ),
 if an = "" and not(length(ans) = length(scores)) then (
  an : "wrong length",
  fb : sconcat(
   "There are \\(",nn,"\\) players in ",nam1,", so your ",
   "answer should be a list of length \\(",nn,"\\). "
  )
 ),
 if an = "" and not(ans = reverse(sort(ans))) then (
  if ans = sort(ans) then (
   an : "increasing",
   fb : sconcat(
    "Your list is given in increasing order, but it should ",
    "be given in decreasing order."
   ) 
  ) else (
   an : "not decreasing",
   fb : "Your list is not sorted into decreasing order."
  )
 ),
 if an = "" and apply(max,ans) > nn - 1 then (
  an : "too big",
  fb : sconcat(
   "Each player plays \\(",nn-1,"\\) games, so the maximum ",
   "possible score for each player is \\(",nn-1,"\\).  It ",
   "does not make sense to have entries larger than this in ",
   "your list."
  )
 ),
 if an = "" and not(apply("+",ans) = binomial(nn,2)) then (
  an : "wrong sum",
  fb : sconcat(
   "The sum of the scores in your list should be equal to the ",
   "total number of games, which is ",
   "\\(\\binom{",nn,"}{2}=",binomial(nn,2),"\\).  In fact, however, ",
   "the sum of the scores in your list is \\(",apply("+",ans),"\\)."
  )
 ),
 if an = "" then (
  if ans = scores then (
   sc : 1, an : "correct"
  ) else (
   an : "incorrect"
  )
 ),
 return([sc,an,fb])
);

check_latin(ans,N0) := block([p,q,sq,N,sc,an,fb,i,i1,i2,j,j1,j2],
 p : length(ans),
 q : length(first(ans)),
 if p = q then (sq : "square") else (sq : "rectangle"),
 if setp(N0) then ( N : N0 )
 elseif listp(N0) then (N : setify(N0)) 
 elseif integerp(N0) and N0 > 0 then (N : setify(makelist(i,i,1,N0)))
 else (N : setify(makelist(i,i,1,max(p,q)))),
 sc : 0,
 an : "",
 fb : "",
 for i from 1 thru p do (
  for j from 1 thru q do (
   if an = "" and not(member(ans[i][j],N)) then (
    an : "invalid entry",
    fb : sconcat(
     "In position (",i,",",j,") you have ",ans[i][j],
     ", which is invalid.  All entries should be elements of the ",
     "set ",tex0(N),"."
    )
   )
  )
 ),
 if an = "" then (
  for i from 1 thru p do (
   for j1 from 1 thru q-1 do (
    for j2 from j1+1 thru q do (
     if an = "" and ans[i][j1] = ans[i][j2] then (
      an : "row clash",
      fb : sconcat(
       "In row ",i,", you have ",ans[i][j1]," in column ",
       j1," and again in column ",j2,". This means that your ",
       sq," is not Latin."
      )
     )
    )
   )
  )
 ),
 if an = "" then (
  for j from 1 thru q do (
   for i1 from 1 thru p-1 do (
    for i2 from i1+1 thru p do (
     if an = "" and ans[i1][j] = ans[i2][j] then (
      an : "col clash",
      fb : sconcat(
       "In column ",j,", you have ",ans[i1][j]," in row ",
       i1," and again in row ",i2,". This means that your ",
       sq," is not Latin."
      )
     )
    )
   )
  )
 ),
 if an = "" then (
  sc : 1, an : "correct"
 ),
 return([sc,an,fb])
);
